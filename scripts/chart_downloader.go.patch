--- helm/pkg/downloader/chart_downloader.go	2018-08-07 23:18:34.000000000 +0700
+++ helm/pkg/downloader/chart_downloader-new.go	2018-08-08 00:48:27.000000000 +0700
@@ -23,6 +23,7 @@
 	"net/url"
 	"os"
 	"path/filepath"
+	"regexp"
 	"strings"
 
 	"k8s.io/helm/pkg/getter"
@@ -81,7 +82,7 @@
 // Returns a string path to the location where the file was downloaded and a verification
 // (if provenance was verified), or an error if something bad happened.
 func (c *ChartDownloader) DownloadTo(ref, version, dest string) (string, *provenance.Verification, error) {
-	u, g, err := c.ResolveChartVersion(ref, version)
+	u, g, err := c.ResolveChartVersion(ref, version, true)
 	if err != nil {
 		return "", nil, err
 	}
@@ -139,7 +140,13 @@
 //		* If version is non-empty, this will return the URL for that version
 //		* If version is empty, this will return the URL for the latest version
 //		* If no version can be found, an error is returned
-func (c *ChartDownloader) ResolveChartVersion(ref, version string) (*url.URL, getter.Getter, error) {
+func (c *ChartDownloader) ResolveChartVersion(ref, version string, force_version ...bool) (*url.URL, getter.Getter, error) {
+	force_version_opt := false
+
+	if len(force_version) > 0 {
+		force_version_opt = force_version[0]
+	}
+
 	u, err := url.Parse(ref)
 	if err != nil {
 		return nil, nil, fmt.Errorf("invalid chart URL format: %s", ref)
@@ -215,6 +222,14 @@
 		return u, r.Client, fmt.Errorf("invalid chart URL format: %s", ref)
 	}
 
+	// Force rewrite with specified version
+	if force_version_opt && version != "" {
+		strPathChartFileName := u.Path
+		reStr := regexp.MustCompile("^(.*?)-[0-9].*tgz$")
+		repStr := "${1}-" + version + ".tgz"
+		u.Path = reStr.ReplaceAllString(strPathChartFileName, repStr)
+	}
+
 	// If the URL is relative (no scheme), prepend the chart repo's base URL
 	if !u.IsAbs() {
 		repoURL, err := url.Parse(rc.URL)
